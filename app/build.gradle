import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileVersion
    buildToolsVersion rootProject.ext.buildVersion
    defaultConfig {
        applicationId "com.seanutf.android"
        minSdkVersion rootProject.ext.minVersion
        targetSdkVersion rootProject.ext.targetVersion
        versionCode rootProject.ext.appVersionCode as Integer
        versionName rootProject.ext.appVersionName as String
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "int", "LAUNCH_ENVIRONMNET", "${rootProject.ext.launchEnvironment}"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    dynamicFeatures = [":login"]


    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompatVersion}"
    api "com.google.dagger:dagger:${rootProject.ext.daggerVersion}"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerCompilerVersion}"

    testImplementation "junit:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation "androidx.test:runner:${rootProject.ext.testRunnerVersion}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"

    implementation project(':base')

    //微信版本SharedPreferences
    implementation "com.tencent:mmkv:$rootProject.ext.mmkvVersion"
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api 'com.alibaba:arouter-api:1.5.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'

}
final def log = project.logger
final def variants = project.android.applicationVariants
//在构建工程时，执行编织
variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
repositories {
    mavenCentral()
}
